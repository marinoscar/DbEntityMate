using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DbEntityMate.Core
{

    /// <summary>
    /// Base class for data entities in the DbEntityMate framework.
    /// <para>
    /// Provides common properties and initialization logic for all entities, including:
    /// <list type="bullet">
    /// <item>
    /// <description><see cref="Id"/>: A unique identifier for the entity, generated by the provided <see cref="IKeyProvider"/>.</description>
    /// </item>
    /// <item>
    /// <description><see cref="UtcCreatedOn"/>: The UTC timestamp when the entity was created.</description>
    /// </item>
    /// <item>
    /// <description><see cref="UtcModifiedOn"/>: The UTC timestamp when the entity was last modified.</description>
    /// </item>
    /// <item>
    /// <description><see cref="Version"/>: An integer representing the version of the entity, initialized to 1.</description>
    /// </item>
    /// </list>
    /// </para>
    /// <para>
    /// The constructor requires an <see cref="IKeyProvider"/> implementation to generate a unique key for the entity.
    /// </para>
    /// <example>
    /// <code>
    /// var entity = new MyEntity(new GuidKeyProvider());
    /// </code>
    /// </example>
    /// </summary>
    public class EntityBase : IEntity
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EntityBase"/> class.
        /// <para>
        /// The constructor uses the provided <paramref name="keyProvider"/> to generate a unique identifier for the entity.
        /// It also sets the <see cref="UtcCreatedOn"/> and <see cref="UtcModifiedOn"/> timestamps to the current UTC time,
        /// and initializes the <see cref="Version"/> property to 1.
        /// </para>
        /// </summary>
        /// <param name="keyProvider">
        /// An implementation of <see cref="IKeyProvider"/> used to generate a unique key for the entity.
        /// </param>
        /// <exception cref="ArgumentNullException">
        /// Thrown if <paramref name="keyProvider"/> is <c>null</c>.
        /// </exception>
        public EntityBase(IKeyProvider keyProvider)
        {
            var p = keyProvider ?? throw new ArgumentNullException(nameof(keyProvider));
            Id = p.GenerateKey();
            UtcCreatedOn = DateTime.UtcNow;
            UtcModifiedOn = DateTime.UtcNow;
            Version = 1;
        }

        /// <summary>
        /// Gets or sets the unique identifier for the entity.
        /// This value is generated by the provided <see cref="IKeyProvider"/> during construction.
        /// </summary>
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets the UTC timestamp when the entity was created.
        /// This value is set to <see cref="DateTime.UtcNow"/> during construction.
        /// </summary>
        public DateTime UtcCreatedOn { get; set; }

        /// <summary>
        /// Gets or sets the UTC timestamp when the entity was last modified.
        /// This value is set to <see cref="DateTime.UtcNow"/> during construction and should be updated on modification.
        /// </summary>
        public DateTime UtcModifiedOn { get; set; }

        /// <summary>
        /// Gets or sets the version of the entity.
        /// This value is initialized to 1 during construction and should be incremented on each modification.
        /// </summary>
        public int Version { get; set; }

        /// <summary>
        /// Serializes the entity to a JSON string with indentation, avoiding circular references.
        /// </summary>
        /// <returns>A JSON string representation of the entity.</returns>
        public string ToJson()
        {
            var options = new System.Text.Json.JsonSerializerOptions
            {
                WriteIndented = true,
                ReferenceHandler = System.Text.Json.Serialization.ReferenceHandler.IgnoreCycles
            };
            return System.Text.Json.JsonSerializer.Serialize(this, this.GetType(), options);
        }

        /// <summary>
        /// Returns a JSON string representation of the entity.
        /// </summary>
        /// <returns>A JSON string representation of the entity.</returns>
        public override string ToString()
        {
            return ToJson();
        }


    }
}
